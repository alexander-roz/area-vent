import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class Container extends JDialog {
    private JPanel contentPane;
    private JPanel mainframe;
    private JPanel buttons;
    private JButton pipes;
    private JButton taps;
    private JButton tee;
    private JButton reducer;
    private JButton closer;
    private JButton caps;
    private JButton duck;
    private JButton inset;
    private JPanel picture;


    public Container() {
        try {

            setContentPane(contentPane);
            setModal(true);

            pipes.addActionListener(e -> goPipes());
            taps.addActionListener(e -> goTaps());
            reducer.addActionListener(e -> goTransitions());
            tee.addActionListener(e -> goTee());
            closer.addActionListener(e -> goClosers());
            caps.addActionListener(e -> goCaps());
            duck.addActionListener(e -> goDucks());
            inset.addActionListener(e -> goInsets());
        } catch (Exception e) {
            System.err.println("ContentPane cannot be set");
        }
    }

    private void goPipes() {
        Pipes pipes = new Pipes();
        pipes.pack();
        pipes.setLocationRelativeTo(null);
        pipes.setVisible(true);
    }

    private void goTaps() {
        Taps taps = new Taps();
        taps.pack();
        taps.setLocationRelativeTo(null);
        taps.setVisible(true);
    }

    private void goTransitions() {
        Transitions transitions = new Transitions();
        transitions.pack();
        transitions.setLocationRelativeTo(null);
        transitions.setVisible(true);
    }

    private void goTee() {
        Tee tee = new Tee();
        tee.pack();
        tee.setLocationRelativeTo(null);
        tee.setVisible(true);
    }

    private void goClosers() {
        Closers closers = new Closers();
        closers.pack();
        closers.setLocationRelativeTo(null);
        closers.setVisible(true);
    }

    private void goCaps() {
        Caps caps = new Caps();
        caps.pack();
        caps.setLocationRelativeTo(null);
        caps.setVisible(true);
    }

    private void goDucks() {
        Ducks ducks = new Ducks();
        ducks.pack();
        ducks.setLocationRelativeTo(null);
        ducks.setVisible(true);
    }

    private void goInsets() {
        Insets insets = new Insets();
        insets.pack();
        insets.setLocationRelativeTo(null);
        insets.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new java.awt.Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(663, 550));
        mainframe = new JPanel();
        mainframe.setLayout(new GridLayoutManager(1, 1, new java.awt.Insets(0, 0, 0, 0), -1, -1));
        Font mainframeFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, mainframe.getFont());
        if (mainframeFont != null) mainframe.setFont(mainframeFont);
        mainframe.setForeground(new Color(-12828863));
        contentPane.add(mainframe, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttons = new JPanel();
        buttons.setLayout(new GridLayoutManager(8, 2, new java.awt.Insets(0, 0, 0, 0), -1, -1));
        buttons.setForeground(new Color(-5324302));
        mainframe.add(buttons, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttons.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        pipes = new JButton();
        Font pipesFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, pipes.getFont());
        if (pipesFont != null) pipes.setFont(pipesFont);
        pipes.setText("Воздуховод");
        buttons.add(pipes, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, -1), new Dimension(150, -1), 0, false));
        taps = new JButton();
        Font tapsFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, taps.getFont());
        if (tapsFont != null) taps.setFont(tapsFont);
        taps.setText("Отвод");
        buttons.add(taps, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), new Dimension(150, -1), 0, false));
        tee = new JButton();
        Font teeFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, tee.getFont());
        if (teeFont != null) tee.setFont(teeFont);
        tee.setText("Тройник");
        buttons.add(tee, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, 30), new Dimension(150, -1), 0, false));
        reducer = new JButton();
        Font reducerFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, reducer.getFont());
        if (reducerFont != null) reducer.setFont(reducerFont);
        reducer.setText("Переход");
        buttons.add(reducer, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, 30), new Dimension(150, -1), 0, false));
        closer = new JButton();
        Font closerFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, closer.getFont());
        if (closerFont != null) closer.setFont(closerFont);
        closer.setText("Заглушка");
        buttons.add(closer, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, 30), new Dimension(150, -1), 0, false));
        caps = new JButton();
        Font capsFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, caps.getFont());
        if (capsFont != null) caps.setFont(capsFont);
        caps.setText("Зонт");
        buttons.add(caps, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, 30), new Dimension(150, -1), 0, false));
        duck = new JButton();
        Font duckFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, duck.getFont());
        if (duckFont != null) duck.setFont(duckFont);
        duck.setText("Со смещением");
        buttons.add(duck, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, 30), new Dimension(150, -1), 0, false));
        inset = new JButton();
        Font insetFont = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, inset.getFont());
        if (insetFont != null) inset.setFont(insetFont);
        inset.setText("Врезка");
        buttons.add(inset, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, 30), new Dimension(150, -1), 0, false));
        picture = new JPanel();
        picture.setLayout(new GridLayoutManager(3, 1, new java.awt.Insets(0, 0, 0, 0), -1, -1));
        picture.setInheritsPopupMenu(false);
        buttons.add(picture, new GridConstraints(0, 1, 8, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/img/mainpicture.png")));
        label1.setText("");
        picture.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("© Alexander Rozantsev ");
        picture.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$("Tahoma", Font.BOLD | Font.ITALIC, -1, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setOpaque(false);
        label3.setText("a.rozantsev@list.ru");
        picture.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}

